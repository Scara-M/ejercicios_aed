"""
6 - Secuencia promedio de pares
Se pide desarrollar un programa en Python controlado por un men√∫ de opciones. Ese men√∫ debe permitir gestionar las siguientes tareas, siempre usando funciones que acepten par√°metros y/o retornen valores en cada situaci√≥n en que se considere apropiado:
-------
‚Ä¢ Cargar una sucesi√≥n de n√∫meros enteros y positivos (validar que efectivamente cada n√∫mero
que se cargue sea mayor a cero). La carga finaliza cuando se ingresa un cero. Mostrar la can∆üdad
de n√∫meros de la sucesi√≥n cargada que son m√∫l∆üplos del primer numero de la secuencia.
------
Ingresar por teclado dos n√∫meros p y q que definen los l√≠mites de un intervalo [ùëù, ùëû] (validar
que 0 < ùëù < ùëû) y una sucesi√≥n de n n√∫meros (tambi√©n cargando n por teclado y validando
que ùëõ > 0). Determine cu√°ntos de los n√∫meros de la sucesi√≥n cargada est√°n fuera del intervalo
y cu√°ntos est√°n dentro del intervalo, e indicar tambi√©n cu√°ntos de los n√∫meros cargados eran
pares y estaban dentro del intervalo dado.
-------
Cargar una secuencia de n√∫meros enteros posi∆üvos (validar que efec∆üvamente cada n√∫mero
que se cargue sea mayor a cero). La carga debe terminar cuando se ingrese un n√∫mero mayor a
100. Determine si en la secuencia se ingresaron dos n√∫meros con∆üguos que sean pares. Si es as√≠
muestre el promedio de todos los n√∫meros pares que se hayan ingresado. Si no, informe que no
se ingresaron n√∫meros con∆üguos pares. Ejemplo: en la secuencia 1, 2, 3, 6, 4, 7, 8 hay al menos
un dos n√∫meros con∆üguos que son pares (el 6 y el 4) y en este caso, el promedio de todos los
pares de la secuencia es (2 + 6 + 4 + 8) / 4 = 20/4 = 5. Pero en esta secuencia: 1, 2, 5, 7, 8, 9, 3,
6, 1 no hay n√∫meros con∆üguos pares.
"""
def validar_mayor(valor,mensaje='Ingrese un n√∫mero: '):
    numero = int(input(mensaje))
    while numero <= valor:
        print('El n√∫mero debe ser mayor a ', valor)
        numero = int(input(mensaje))
    return numero


def es_multiplo(numero,divisor):
    paridad = numero % divisor
    if paridad == 0:
        return True
    else:
        return False


def validar_rango():
    n1 = validar_mayor(0, 'Ingrese el valor m√≠nimo p: ')
    n2 = validar_mayor(0, 'Ingrese el valor m√°ximo q: ')
    while n2 <= n1:
        print('Error! El valor de q debe ser mayor al de p')
        n2 = validar_mayor(0, 'Ingrese el valor m√°ximo q: ')
    return n1, n2


# bloque principal
menu = ('-------------------------\n\
1 - Cargar una sucesi√≥n de n√∫meros enteros y positivos\n\
2 - Numeros en el intervalo \n\
3 - Numeros contiguos \n\
4 - Salir del programa \n\
-------------------------')

op = -1
while op != 4:
    print(menu)
    op = int(input('Ingrese una opci√≥n (Finalice con 4): '))

    # opcion 1
    if op == 1:
        cant = 0
        
        num = validar_mayor(-1,'Ingrese un n√∫mero(Finaliza con cero): ')
        primero = num
        while num != 0:
            if es_multiplo(num,primero):
                cant += 1
            num = validar_mayor(-1,'Ingrese un n√∫mero(Finaliza con cero): ')
        print('La cantidad de n√∫meros que son m√∫ltiplos del primer n√∫mero ingresado son: ', cant)

    # opcion 2
    elif op == 2:
        cant_fuera = cant_adentro = 0
        pares = impares = 0

        p, q = validar_rango()
        
        n = validar_mayor(0, 'Ingrese la cantidad de n√∫meros a procesar: ')
        for x in range(n):
            num = int(input('Ingrese un n√∫mero: '))

            # dentro o fuera del rango
            if num < p or num > q:
                cant_fuera += 1
            else:
                cant_adentro += 1

            #  determinar cantidad pares e impares
            if es_multiplo(num,2):
                pares += 1
            else: 
                impares += 1
        # salida
        print('La cantidad de n√∫meros fuera del intervalo son: ', cant_fuera)
        print('La cantidad de n√∫meros dentro del intervalo son: ', cant_adentro)
        print('La cantidad de pares son ', pares)
        print('La cantidad de impares son ', impares)
        
    # opcion 3
    elif op == 3:
        
        num = validar_mayor(0, 'Ingrese un entero positivo (Finaliza con mayor a 100): ')
        while num < 100:
             num = validar_mayor(0, 'Ingrese un entero positivo (Finaliza con mayor a 100): ')
    else:
        print('-'*15)
        print('Opci√≥n Incorrecta. Vuelva a ingresar')
else:
    print('-'*45)
    print('ADIOSSSS')

"""
Cargar una secuencia de n√∫meros enteros posi∆üvos (validar que efec∆üvamente cada n√∫mero
que se cargue sea mayor a cero). La carga debe terminar cuando se ingrese un n√∫mero mayor a
100. Determine si en la secuencia se ingresaron dos n√∫meros con∆üguos que sean pares. Si es as√≠
muestre el promedio de todos los n√∫meros pares que se hayan ingresado. Si no, informe que no
se ingresaron n√∫meros con∆üguos pares. 
Ejemplo: en la secuencia 1, 2, 3, 6, 4, 7, 8 hay al menos
un dos n√∫meros con∆üguos que son pares (el 6 y el 4) y en este caso, el promedio de todos los
pares de la secuencia es (2 + 6 + 4 + 8) / 4 = 20/4 = 5. Pero en esta secuencia: 1, 2, 5, 7, 8, 9, 3,
6, 1 no hay n√∫meros con∆üguos pares.
"""